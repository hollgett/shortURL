// Code generated by MockGen. DO NOT EDIT.
// Source: ./shortener_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShortenerHandler is a mock of ShortenerHandler interface.
type MockShortenerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerHandlerMockRecorder
}

// MockShortenerHandlerMockRecorder is the mock recorder for MockShortenerHandler.
type MockShortenerHandlerMockRecorder struct {
	mock *MockShortenerHandler
}

// NewMockShortenerHandler creates a new mock instance.
func NewMockShortenerHandler(ctrl *gomock.Controller) *MockShortenerHandler {
	mock := &MockShortenerHandler{ctrl: ctrl}
	mock.recorder = &MockShortenerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerHandler) EXPECT() *MockShortenerHandlerMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockShortenerHandler) CreateShortURL(requestData string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", requestData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockShortenerHandlerMockRecorder) CreateShortURL(requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockShortenerHandler)(nil).CreateShortURL), requestData)
}

// GetShortURL mocks base method.
func (m *MockShortenerHandler) GetShortURL(pathURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", pathURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURL indicates an expected call of GetShortURL.
func (mr *MockShortenerHandlerMockRecorder) GetShortURL(pathURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockShortenerHandler)(nil).GetShortURL), pathURL)
}

// Ping mocks base method.
func (m *MockShortenerHandler) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortenerHandlerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortenerHandler)(nil).Ping), ctx)
}

// RandomID mocks base method.
func (m *MockShortenerHandler) RandomID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RandomID indicates an expected call of RandomID.
func (mr *MockShortenerHandlerMockRecorder) RandomID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomID", reflect.TypeOf((*MockShortenerHandler)(nil).RandomID))
}
